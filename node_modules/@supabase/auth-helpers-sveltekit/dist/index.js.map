{"version":3,"sources":["../src/supabaseLoadClient.ts","../src/loadStorageAdapter.ts","../src/supabaseServerClient.ts","../src/serverStorageAdapter.ts"],"sourcesContent":["import {\n\tCookieOptionsWithName,\n\tcreateSupabaseClient,\n\tisBrowser,\n\tSupabaseClientOptionsWithoutAuth\n} from '@supabase/auth-helpers-shared';\nimport { Session, SupabaseClient } from '@supabase/supabase-js';\nimport { LoadEvent } from '@sveltejs/kit';\nimport { SvelteKitLoadAuthStorageAdapter } from './loadStorageAdapter';\nimport { GenericSchema } from '@supabase/supabase-js/dist/module/lib/types';\n\nlet cachedBrowserClient: SupabaseClient<any, string> | undefined;\n\n/**\n * ## Authenticated Supabase client\n *\n * Returns a new authenticated Supabase client.\n *\n * When running in the browser it will create a single instance\n * that is returned for subsequent runs.\n *\n * ### Example:\n *\n * ```ts\n * import { invalidate } from '$app/navigation';\n * import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public';\n * import { createSupabaseLoadClient } from '@supabase/auth-helpers-sveltekit';\n * import type { LayoutLoad } from './$types';\n *\n * export const load: LayoutLoad = async ({ fetch, data, depends }) => {\n *   depends('supabase:auth');\n *\n *   const supabase = createSupabaseLoadClient({\n *     supabaseUrl: PUBLIC_SUPABASE_URL,\n *     supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n *     event: { fetch },\n *     serverSession: data.session,\n *     onAuthStateChange() {\n *       invalidate('supabase:auth');\n *     }\n *   });\n *\n *   const {\n *     data: { session }\n * \t} = await supabase.auth.getSession();\n *\n *   return { supabase, session };\n * };\n *\n * ```\n */\nexport function createSupabaseLoadClient<\n\tDatabase = any,\n\tSchemaName extends string & keyof Database = 'public' extends keyof Database\n\t\t? 'public'\n\t\t: string & keyof Database,\n\tSchema extends GenericSchema = Database[SchemaName] extends GenericSchema\n\t\t? Database[SchemaName]\n\t\t: any\n>({\n\tsupabaseUrl,\n\tsupabaseKey,\n\tevent,\n\tserverSession,\n\toptions,\n\tcookieOptions\n}: {\n\tsupabaseUrl: string;\n\t/**\n\t * The supabase key. Make sure you **always** use the ANON_KEY.\n\t */\n\tsupabaseKey: string;\n\tevent: Pick<LoadEvent, 'fetch'>;\n\t/**\n\t * The initial session from the server.\n\t */\n\tserverSession: Session | null;\n\toptions?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n\tcookieOptions?: CookieOptionsWithName;\n}): SupabaseClient<Database, SchemaName, Schema> {\n\tconst browser = isBrowser();\n\tif (browser && cachedBrowserClient) {\n\t\treturn cachedBrowserClient as SupabaseClient<Database, SchemaName, Schema>;\n\t}\n\n\tconst client = createSupabaseClient<Database, SchemaName, Schema>(supabaseUrl, supabaseKey, {\n\t\t...options,\n\t\tglobal: {\n\t\t\tfetch: event.fetch,\n\t\t\t...options?.global,\n\t\t\theaders: {\n\t\t\t\t...options?.global?.headers,\n\t\t\t\t'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n\t\t\t}\n\t\t},\n\t\tauth: {\n\t\t\tstorageKey: cookieOptions?.name,\n\t\t\tstorage: new SvelteKitLoadAuthStorageAdapter(serverSession, cookieOptions)\n\t\t}\n\t});\n\n\tif (browser) {\n\t\tcachedBrowserClient = client;\n\t}\n\n\treturn client;\n}\n","import {\n\tBrowserCookieAuthStorageAdapter,\n\tCookieOptions,\n\tisBrowser\n} from '@supabase/auth-helpers-shared';\nimport { Session } from '@supabase/supabase-js';\n\nexport class SvelteKitLoadAuthStorageAdapter extends BrowserCookieAuthStorageAdapter {\n\tconstructor(\n\t\tprivate readonly serverSession: Session | null = null,\n\t\tcookieOptions?: CookieOptions\n\t) {\n\t\tsuper(cookieOptions);\n\t}\n\n\tgetItem(key: string) {\n\t\tif (!isBrowser()) {\n\t\t\treturn JSON.stringify(this.serverSession);\n\t\t}\n\t\treturn super.getItem(key);\n\t}\n}\n","import {\n\tCookieOptionsWithName,\n\tSupabaseClientOptionsWithoutAuth,\n\tcreateSupabaseClient\n} from '@supabase/auth-helpers-shared';\nimport { RequestEvent } from '@sveltejs/kit';\nimport { SvelteKitServerAuthStorageAdapter } from './serverStorageAdapter';\nimport { GenericSchema } from '@supabase/supabase-js/dist/module/lib/types';\nimport { SupabaseClient } from '@supabase/supabase-js';\n\n/**\n * ## Authenticated Supabase client\n * ### Handle\n *\n * ```ts\n * import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';\n * import { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit';\n * import type { Handle } from '@sveltejs/kit';\n *\n * export const handle: Handle = async ({ event, resolve }) => {\n *   event.locals.supabase = createSupabaseServerClient({\n *     supabaseUrl: PUBLIC_SUPABASE_URL,\n *     supabaseKey: PUBLIC_SUPABASE_ANON_KEY,\n *     event\n *   });\n *\n *   event.locals.getSession = async () => {\n *     const {\n *       data: { session }\n *     } = await event.locals.supabase.auth.getSession();\n *     return session;\n *   };\n *\n *   return resolve(event, {\n *     filterSerializedResponseHeaders(name) {\n *       return name === 'content-range';\n *     }\n *   });\n * };\n * ```\n *\n * ### Types\n *\n * ```ts\n * import { SupabaseClient, Session } from '@supabase/supabase-js';\n *\n * declare global {\n *   namespace App {\n *     interface Locals {\n *       supabase: SupabaseClient;\n *       getSession(): Promise<Session | null>;\n *     }\n *     // interface PageData {}\n *     // interface Error {}\n *     // interface Platform {}\n *   }\n * }\n *\n * export {};\n * ```\n */\nexport function createSupabaseServerClient<\n\tDatabase = any,\n\tSchemaName extends string & keyof Database = 'public' extends keyof Database\n\t\t? 'public'\n\t\t: string & keyof Database,\n\tSchema extends GenericSchema = Database[SchemaName] extends GenericSchema\n\t\t? Database[SchemaName]\n\t\t: any\n>({\n\tsupabaseUrl,\n\tsupabaseKey,\n\tevent,\n\toptions,\n\tcookieOptions,\n\texpiryMargin\n}: {\n\tsupabaseUrl: string;\n\tsupabaseKey: string;\n\tevent: Pick<RequestEvent, 'cookies'>;\n\toptions?: SupabaseClientOptionsWithoutAuth<SchemaName>;\n\tcookieOptions?: CookieOptionsWithName;\n\texpiryMargin?: number;\n}): SupabaseClient<Database, SchemaName, Schema> {\n\tconst client = createSupabaseClient<Database, SchemaName, Schema>(supabaseUrl, supabaseKey, {\n\t\t...options,\n\t\tglobal: {\n\t\t\t...options?.global,\n\t\t\theaders: {\n\t\t\t\t...options?.global?.headers,\n\t\t\t\t'X-Client-Info': `${PACKAGE_NAME}@${PACKAGE_VERSION}`\n\t\t\t}\n\t\t},\n\t\tauth: {\n\t\t\tstorageKey: cookieOptions?.name,\n\t\t\tstorage: new SvelteKitServerAuthStorageAdapter(event, cookieOptions, expiryMargin)\n\t\t}\n\t});\n\n\treturn client;\n}\n","import { CookieAuthStorageAdapter, CookieOptions } from '@supabase/auth-helpers-shared';\nimport { Session } from '@supabase/supabase-js';\nimport { RequestEvent } from '@sveltejs/kit';\n\nexport class SvelteKitServerAuthStorageAdapter extends CookieAuthStorageAdapter {\n\tprivate isInitialDelete = true;\n\tprivate currentSession: Partial<Session> | null = null;\n\n\tconstructor(\n\t\tprivate readonly event: Pick<RequestEvent, 'cookies'>,\n\t\tcookieOptions?: CookieOptions,\n\t\tprivate readonly expiryMargin: number = 60\n\t) {\n\t\tsuper(cookieOptions);\n\t}\n\n\tprotected getCookie(name: string) {\n\t\treturn this.event.cookies.get(name);\n\t}\n\n\tprotected setCookie(name: string, value: string) {\n\t\tthis.event.cookies.set(name, value, {\n\t\t\thttpOnly: false,\n\t\t\t...this.cookieOptions\n\t\t});\n\t}\n\n\tprotected deleteCookie(name: string) {\n\t\tthis.event.cookies.delete(name, {\n\t\t\thttpOnly: false,\n\t\t\t...this.cookieOptions\n\t\t});\n\t}\n\n\tasync getItem(key: string) {\n\t\tconst sessionStr = await super.getItem(key);\n\t\tif (!sessionStr) {\n\t\t\tthis.currentSession = null;\n\t\t\treturn null;\n\t\t}\n\n\t\tconst session: Session | null = JSON.parse(sessionStr);\n\t\tthis.currentSession = session;\n\n\t\tif (session?.expires_at) {\n\t\t\t// shorten the session lifetime so it does not expire on the server\n\t\t\tsession.expires_at -= this.expiryMargin;\n\t\t}\n\t\treturn JSON.stringify(session);\n\t}\n\n\tremoveItem(key: string) {\n\t\tif (this.isInitialDelete && this.currentSession?.expires_at) {\n\t\t\tconst now = Math.round(Date.now() / 1000);\n\t\t\tif (this.currentSession.expires_at < now + 10) {\n\t\t\t\tthis.isInitialDelete = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tsuper.removeItem(key);\n\t}\n}\n"],"mappings":"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","names":["isBrowser","isBrowser","createSupabaseClient","createSupabaseClient"]}